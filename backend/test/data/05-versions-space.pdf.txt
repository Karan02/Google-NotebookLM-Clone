

Assessment 
 
Part 1: Leadership Scenarios: 
 
Scenario 1: NavigaƟng Technical Disagreement and Conflict 
 
1. How would you intervene? 
I would intervene immediately and respecƞully de-escalate the conversaƟon by pausing the meeƟng 
and acknowledging both Alex and Ben's concerns. I'd emphasize that both viewpoints have merit and 
that our goal is to collaboraƟvely choose the best approach for our current context. 
 
2. Steps to facilitate a construcƟve discussion: 
 Schedule a dedicated follow-up session for deeper technical evaluaƟon. 
 Create an evaluaƟon matrix with key criteria (scalability, team capability, delivery speed, 
long-term maintenance). 
 Encourage data-backed proposals: pros/cons, PoCs, or benchmarks. 
 Facilitate input from all team members to balance the discussion and encourage 
psychological safety 
  
3. Ensuring team cohesion: 
 Reiterate that disagreement is natural and even healthy in engineering teams. 
 Communicate that the final decision will be made based on project needs, not egos. 
 Highlight mutual respect and reinforce team values. 
 AŌer decision, organize a short retrospecƟve to reflect on how the conflict was handled. 
 
 
Scenario 2: Addressing Underperformance and MoƟvaƟon 
 
1. Approach to Chris: 
 I’d invite Chris to a one-on-one conversaƟon in a private, empatheƟc seƫng. I’d avoid 
judgment and begin by expressing concern and support, not criƟcism. 

2. Understanding root cause: 
 Use open-ended quesƟons to allow Chris to share. 
 Offer flexibility or resources (e.g., Ɵme off, professional help) if personal issues are involved. 
 Observe if it’s workload burnout, lack of challenge, or unclear expectaƟons. 
3. Balancing support and producƟvity: 
 Reallocate or reduce Chris’s workload temporarily. 
 Communicate transparently with the team (without sharing personal details). 
 Involve HR if extended support is required. 
4. Monitoring and support: 
 Set short-term, achievable goals with Chris. 
 Offer regular check-ins (weekly/bi-weekly). 
 Provide mentorship or pair programming to re-engage. 
 Document progress and support provided. 
 
 
Scenario 3: Managing Scope Creep and ShiŌing PrioriƟes 
 
1. Immediate acƟon: 
 Request a quick sync with the Product Owner to understand the regulatory requirement, 
Ɵmeline, and priority. 
 Freeze any new development temporarily. 
 
2. CommunicaƟng to team: 
 Be transparent and explain why the change is necessary (compliance). 
 Acknowledge current efforts and pressure. 
 Frame this as a collaboraƟve challenge and invite input on reprioriƟzaƟon. 
 
3. Re-prioriƟzing and stakeholder management: 
 Conduct impact analysis of changing scope. 
 Involve Scrum Master and Product Owner to re-groom backlog. 
 Communicate new Ɵmelines to stakeholders with jusƟficaƟon. 
 
4. Empowering the team: 

 Involve the team in decision-making. 
 Provide clear goals and boundaries. 
 Celebrate small wins and ensure support through the transiƟon. 
 
Scenario 4: Introducing a New Technology/Process 
 
1. AdvocaƟng for the new tool: 
 Share a demo or case study of how the new framework improves speed or quality. 
 Tie the adopƟon to team pain points (e.g., current tool limitaƟons). 
 
 
2. Overcoming resistance: 
 Acknowledge concerns and ask for feedback. 
 IdenƟfy champions in the team to try it first. 
 Offer opt-in pilots instead of forced adopƟon iniƟally. 
 
3. SupporƟng transiƟon: 
 Schedule onboarding/training sessions. 
 Allocate spike Ɵme in the sprint for learning. 
 Provide ongoing documentaƟon and pairing. 
 
4. Measuring success: 
 Track metrics like test coverage, defect leakage, Ɵme to execute tests. 
 Gather team feedback aŌer a few sprints. 
 Compare regression cycle Ɵmes before and aŌer adopƟon. 
 
 
Scenario 5: Leading a Post-Mortem of a Major Incident 
 
1. Preparing the meeƟng: 
 Gather facts: Ɵmelines, logs, incident details. 
 Set the tone by sending out a blameless post-mortem agenda. 

 
2. MeeƟng objecƟves: 
 IdenƟfy what went wrong, how it was detected, how we responded, and how to prevent 
recurrence. 
 Discuss both technical and process improvements. 
 
3. Guiding root cause analysis: 
 Use "Five Whys" or fishbone diagrams. 
 Focus on systems thinking, not individual failure. 
 Encourage psychological safety for open discussion. 
 
 
4. Follow-up acƟons: 
 Document acƟon items with owners and deadlines. 
 Schedule a review to ensure items are completed. 
 Share lessons learned with the broader team/org. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

Part 2: Architectural Assessment: 
 
1. Login Endpoint – PlantUML Sequence Diagram 
This involves: 
 AuthenƟcaƟon via NetIQ (SSO) 
 Token issuance via vod-ms-domain-auth (DXL OAuth) 
 Access token returned to the frontend 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
2. Customer Details Endpoint – PlantUML Sequence Diagram 
 This represents retrieving customer or biometric session details. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
3. Biometric TransacƟon Init – PlantUML Sequence Diagram 
This involves: 
 Frontend iniƟaƟng a biometric capture 
 Backend triggering KYC vendor flow 
 Receiving callback and finalizing verificaƟon 
 SSE updates sent to frontend 
 
 
 
 
 
 